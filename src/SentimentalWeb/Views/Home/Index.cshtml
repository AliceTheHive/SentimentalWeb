@model SentimentalWeb.Models.ResultViewModel

@using SentimentalWeb.HtmlHelpers;

@{
    ViewBag.Title = "Home Page";
}

<div class="row" role="form">
    <div class="col-md-12">
        <form id="inputForm" action="/" method="post" onsubmit="Loading()">
            <div class="form-group">
                <label for="inputText">Enter the text you want to analyse:</label>
                <textarea class="form-control" id="inputText" name="inputText" rows="4"></textarea>
            </div>
            <button type="submit" id="analyse-button"><i class="fa fa-magic" id="magic"></i> Analyse</button>
        </form>
    </div>
</div>

@if (Model != null)
{
    <div class="row" id="results" role="document">
        <div class="col-md-12">
            <p>The sentiment (higher = more positive)...</p>
            <div id="sentiment-progress" class="progress round">
                <div class="progress-bar meter" role="progressbar" aria-valuenow="@Model.SentimentScore" aria-valuemin="0" aria-valuemax="100" style="width: @Formatting.FormatAsPercentage(Model.SentimentScore)%; min-width: 2em;">
                    <span id="sentiment-score">@Formatting.FormatAsPercentage(Model.SentimentScore)%</span>
                </div>
            </div>
            <p>Key phrases are highlighted below ...</p>
            <p id="key-phrases">
                @foreach (var word in Formatting.StripPunctuation(Model.OriginalText).Split(' '))
                {
                    if (Model.KeyPhrases.Contains(word))
                    {
                        <span class="highlight">@word</span><span> </span>
                    }
                    else
                    {
                        <span>@word </span>
                    }
                }
            </p>
        </div>
    </div>

    @section scripts{

    <!--Show a native Windows message dialog via Windows api-->
    @*<script src="/js/windows.js" type="text/javascript"></script>
    <script type="text/javascript">
    if (typeof Windows != 'undefined') {
        //send toast
        SendToast("The sentiment score was @Formatting.FormatAsPercentage(Model.SentimentScore)%");

        //send tiles
        SendTile("The sentiment score was @Formatting.FormatAsPercentage(Model.SentimentScore)%");
        SendTile("The key phrases were @(Model.KeyPhrasesAsString)");

        //send pop up
        SendPopup("The sentiment score was @Formatting.FormatAsPercentage(Model.SentimentScore)%");
    }
    </script>*@

    }

}